<%
  time_resources     = Logjam::Resource.time_resources
  call_resources     = Logjam::Resource.call_resources
  memory_resources   = Logjam::Resource.memory_resources
  heap_resources     = Logjam::Resource.heap_resources
  frontend_resources = Logjam::Resource.frontend_resources
  dom_resources      = Logjam::Resource.dom_resources
  all_resources      = time_resources + call_resources + memory_resources + heap_resources + frontend_resources + dom_resources

  colors             = Logjam::Resource.colors
  pie_colors         = Logjam::Resource.colors_with_transparency(0.7)

  # TODO: fix it
  if @request.present?
    other_keys = @request.keys - all_resources
    other_keys.reject!{|k| k =~ /(^_id|lines|minute|page|_sq|request_info)$/}
    sorted_time_resources = @request.slice(*time_resources).sort { |a, b| b.last <=> a.last }
  end
  size = 75
-%>

<%= render "header" %>
<div id="logjam-container">
  <%= render "sidebar" %>
  <div id="logjam-content" class="app-dashboard">

    <% if @request.present? %>

    <div class="flex">
      <div class="item col-1 blue-links">
        <h2>Request details for action
          <%
             page, minute = @request["page"], @request["minute"]
             _params = params.except(:utf8, :id, :action).merge(:page => page)
             page_params = clean_params(_params.merge(:grouping => "page"))
             request_params = clean_params(_params.merge(:grouping => "request", :start_minute => minute, :end_minute => minute))
          -%>
          <%= link_to(page, page_params, :title => "view summary") -%>
          @
          <%= link_to(request_started_at(@request), request_params, :title => "show requests") -%>
        </h2>
      </div>
    </div>

    <div class="flex">
      <% time_resource_values = @request.slice(*time_resources) -%>
      <% unless time_resource_values.blank? %>
        <div class="item col-5">
          <h2>Time</h2>
          <div id="time" class="breakdown-chart">
            <% resources = *time_resources.select{|r| r =~ /_time$/} - %w(total_time gc_time) -%>
              <%= render :partial => "simple_pie", :locals => {
                    :data => @request.values_at(*resources),
                    :container => "time",
                    :legend => resources,
                    :size => size,
                    :onclick => nil,
                    :colors => pie_colors.values_at(*resources) } %>
          </div>
          <table id="request-details-time">
            <% time_resource_values.sort_by { |e| -e.last }.each do |name, value| -%>
              <% next if value.blank?  -%>
              <tr>
                <td class="resource_name"><%= hrn name %></td>
                <td class="number" style="color:<%= colors[name] || '#000' %>;"><%= time_number(value.to_f) %></td>
              </tr>
            <% end -%>
          </table>

        </div>
      <% end %>

      <% call_resource_values = @request.slice(*call_resources) -%>
      <% unless call_resource_values.blank? %>
        <div class="item col-6">
          <h2>Calls</h2>
          <div id="calls" class="breakdown-chart">
            <% resources = *call_resources.select{|r| r =~ /_calls$/} - ["gc_calls"] -%>
              <%= render :partial => "simple_pie", :locals => {
                    :data => @request.values_at(*resources),
                    :container => "calls",
                    :legend => resources,
                    :size => size,
                    :onclick => nil,
                    :colors => pie_colors.values_at(*resources) } %>
          </div>
          <table id="request-details-calls">
            <% call_resource_values.sort_by { |e| -e.last }.each do |name, value| -%>
              <% next if value.blank?  -%>
              <tr>
                <td class="resource_name"><%= hrn name %></td>
                <td class="number" style="color:<%= colors[name] || '#000' %>;"><%= number_with_delimiter(value.to_i) %></td>
              </tr>
            <% end -%>
          </table>

        </div>
      <% end %>

      <% memory_resource_values = @request.slice(*memory_resources) -%>
      <% unless memory_resource_values.blank? %>
        <div class="item col-6">
          <h2>Allocations</h2>
          <div id="memory" class="breakdown-chart">
            <% resources = *memory_resources-["allocated_memory"]
               h = @request.slice(*resources)
               h["allocated_objects"] *= 40 if h.include?("allocated_objects")
            -%>
            <%= render :partial => "simple_pie", :locals => {
                  :data => h.values_at(*resources),
                  :legend => resources,
                  :container => "memory",
                  :size => size,
                  :onclick => nil,
                  :colors => pie_colors.values_at(*resources) } %>
          </div>
          <table id="request-details-memory">
            <% memory_resource_values.each do |name, value| -%>
              <% next if value.blank?  -%>
              <tr>
                <td class="resource_name"><%= hrn name %></td>
                <td class="number" style="color:<%= colors[name] || '#000' %>;"><%= number_with_delimiter(value.to_i) %></td>
              </tr>
            <% end -%>
          </table>
        </div>
      <% end %>

      <% heap_resource_values = @request.slice(*heap_resources) -%>
      <% unless heap_resource_values.blank? %>
        <% heap_resource_values["free_slots"] = [heap_resource_values["heap_size"] - heap_resource_values["live_data_set_size"], 0].max %>
        <div class="item col-6">
          <h2>Heap</h2>
          <div id="heap" class="breakdown-chart">
            <% resources = *heap_resources
               h = @request.slice(*resources)
               h["free_slots"] = [h.delete("heap_size") - h["live_data_set_size"], 0].max
               resources << "free_slots"
            -%>
                            <%= render :partial => "simple_pie", :locals => {
                                  :data => h.values_at(*resources),
                                  :legend => resources,
                                  :container => "heap",
                                  :size => size,
                                  :onclick => nil,
                                  :colors => pie_colors.values_at(*resources) } %>
          </div>
          <table id="request-details-heap">
            <% heap_resource_values.each do |name, value| -%>
              <% next if value.blank?  -%>
              <tr>
                <td class="resource_name"><%= hrn name %></td>
                <td class="number" style="color:<%= colors[name] || '#000' %>;"><%= number_with_delimiter(value.to_i) %></td>
              </tr>
            <% end -%>
          </table>
        </div>
      <% end %>

    </div>

    <% Logjam::RequestDetailPlugins.all.each do |plugin| %>
      <%= render "request_details_fieldset", instance_exec([@env, @request], &plugin) %>
    <% end %>

    <% unless (lines = @request["lines"]).blank? -%>
      <div class="flex">
        <div class="item col-6">
          <h2>Log lines</h2>
          <% ltimes = line_times(lines) %>
          <% lines.each_with_index do |line,i| -%>
            <div class="logline" data-logjam-tags="<%= line_tags(line) %>">
              <div class="bg">
                <pre class="ct"><%= raw format_log_line(line) %></pre>
                <div class="box" style="width:<%= (1000 * ltimes[i]).to_i %>px"></div>
              </div>
            </div>
          <% end -%>
        </div>
      </div>
    <% end %>
  <% end %>


  <% if @js_exceptions.present? -%>
    <div class="flex">
      <div class="item">
        <h2>Javascript Exceptions</h2>
        <table class="allow-multilines">
          <% @js_exceptions.each.with_index do |e, i| -%>
            <% unless i == 0 -%>
              <tr><td colspan=2><hr /></td></tr>
            <% end -%>
            <%
              # 'logjam_request_id' is redundant information
              # 'controller' and 'action' are just the controller and action of
              #   the rails-app that was the recipiant of the error report
              # 'minute' is injected by the logjam code and isn't useful in this context
              # 'description' will be added back at the beginning of the list
              keys_to_reject = %w(description logjam_request_id controller action minute).join('|')
              keys = e.keys.reject{|k| k =~ /^_|^(#{keys_to_reject})$/}
              keys = ['description'] + keys
              keys.each do |key|
            -%>
              <tr><td><%= key %></td><td><%= e[key] %></td></tr>
            <% end -%>
          <% end -%>
        </table>
      </di>
    </div>
  <% end -%>

  <% if @request.present? %>
    <% if info = @request["request_info"] -%>
      <div class="flex">
        <div class="item">
          <h2>Additional Request Info</h2>
          <table id="request-info" class="">
            <% %w(url method query_parameters body_parameters headers custom).each do |name| -%>
              <% next if (value = info[name]).blank?  -%>
              <tr>
                <td class="resource_name"><%= hrn name %></td>
                <td><%= raw(value.is_a?(Hash) ? format_hash(value) : h(value)) %></td>
              </tr>
            <% end -%>
          </table>
        </div>
      </div>
    <% end -%>
  <% end -%>

  <%= content_for(:page_scripts) do %>
    $(document).ready(function(){
       install_logjam_lines_filter();
       var resizable = $('.resource-fields.resize');
       var max = d3max(resizable.map(function(){ return $(this).height(); }));
       resizable.each(function(){ $(this).height(max); });
     });
  <% end %>

  </div>
</div>
